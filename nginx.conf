worker_processes  1;
load_module /usr/local/openresty/nginx/modules/ngx_http_modsecurity_module.so;
error_log /var/log/openresty/error.log;
events {
    worker_connections 1024;
}
http {
   upstream warm_cache_waf {
        server 103.148.57.195:8082 max_fails=0 weight=50;
   }

   upstream warm_cache {
        server 103.148.57.195:8081 max_fails=0 weight=50;
   }
   include /usr/local/openresty/nginx/conf/site-enables/*;

    server {
        listen 80;
	location / {
		set $proxy "";
		access_by_lua_block {
                	local json = require "cjson"
                	local redis = require "resty.redis"
                	local host = ngx.var.host
			local red = redis:new()
                	local ok, err = red:connect("127.0.0.1", 6379)

                	if not ok then
                    		ngx.say("failed to connect: ", err)
                    		return
                	end
			
                	local res, err = red:get(host)
                	if not res then
                    		ngx.say("failed to get cdn: ", err)
                    		return
                	end
                	local res_json = json.decode(res)
			local waf = res_json["waf"]
			if waf ~= nil then
                		local waf_status = waf["enable"]
				if waf_status == true then
					ngx.var.proxy = "warm_cache_waf"
				else
					ngx.var.proxy = "warm_cache"
				end
			else
				ngx.var.proxy = "warm_cache"
			end
		}
		proxy_set_header Host $host;
		proxy_pass http://$proxy$uri;
	}
   }
    server {
        listen 443 ssl;
	ssl_certificate /etc/ssl/certs/nginx-selfsigned.crt;
    	ssl_certificate_key /etc/ssl/private/nginx-selfsigned.key;
    	ssl_dhparam /etc/ssl/certs/dhparam.pem;
        location / {
                set $proxy "";
                access_by_lua_block {
                        local json = require "cjson"
                        local redis = require "resty.redis"
                        local host = ngx.var.host
                        local red = redis:new()
                        local ok, err = red:connect("127.0.0.1", 6379)

                        if not ok then
                                ngx.say("failed to connect: ", err)
                                return
                        end

                        local res, err = red:get(host)
                        if not res then
                                ngx.say("failed to get cdn: ", err)
                                return
                        end
                        local res_json = json.decode(res)
                        local waf = res_json["waf"]
                        if waf ~= nil then
                                local waf_status = waf["enable"]
                                if waf_status == true then
                                        ngx.var.proxy = "warm_cache_waf"
                                else
                                        ngx.var.proxy = "warm_cache"
                                end
                        else
                                ngx.var.proxy = "warm_cache"
                        end
                }
                proxy_set_header Host $host;
                proxy_pass http://$proxy$uri;
        }
   }
   server {
	listen 81;
	location / {
            content_by_lua_block {
		local json = require "cjson"
                local redis = require "resty.redis"
                local red = redis:new()
		local ok, err = red:connect("127.0.0.1", 6379)

                -- or connect via hostname, need to specify resolver just like above

                if not ok then
                    ngx.say("failed to connect: ", err)
                    return
                end

                local res, err = red:get('cdn')
                if not res then
                    ngx.say("failed to get cdn: ", err)
                    return
                end
		local res_json = json.decode(res)
		ngx.say(res_json["rule:default"]["upstream"][2])
		ngx.say(res_json["waf"]["enable"])
	}
   }
}
   server {
	listen 8081;
	location / {
		content_by_lua_block {
			 ngx.say("no waf")
		}
	}
   }
}	

